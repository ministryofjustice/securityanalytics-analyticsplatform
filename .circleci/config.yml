version: 2.1

master-only: &master-only
  filters:
    branches:
      only: master

executors:
  builder:
    docker:
      - image: duckpodger/python3-node-aws-terraform

jobs:
  setup:
    executor: builder
    steps:
      - restore_cache:
          keys:
            - git-v1-{{ .Branch }}-
            - git-v1-

      - checkout

      - run:
          name: update git submodule
          command: |
            git submodule update --remote
            git submodule sync

      - restore_cache:
          keys:
            - npm-v1-{{ .Branch }}-
            - npm-v1-

      - run: npm install

      - restore_cache:
          keys:
            - other-v1-{{ .Branch }}-
            - other-v1-

      - run:
          name: install virtual env
          command: |
            export PIPENV_VENV_IN_PROJECT=true
            pipenv install --dev --deploy
            if [ ! -d "test-reports" ]; then
              mkdir test-reports
            fi

      - run:
          name: terraform
          command: |
            cd infrastructure
            terraform init
            . .circleci/env.sh
            terraform get --update
            terraform workspace new $SSM_SOURCE_STAGE || terraform workspace select $SSM_SOURCE_STAGE
            echo checking formatting
            terraform fmt -check=true
            echo making the plan
            terraform plan -var ssm_source_stage=$SSM_SOURCE_STAGE -var account_id=$ACCOUNT_ID -no-color -out=plan.file > terraform.plan

      - persist_to_workspace:
          root: .
          paths:
            - "*"

      - store_artifacts:
          path: .generated

      - save_cache:
          key: git-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

      - save_cache:
          key: npm-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - "node_modules"

      - save_cache:
          key: other-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".terraform"
            - ".venv"
            - ".cache"
            - ".serverless"
            - ".pytest_cache"

  unit-test:
    executor: builder
    steps:
      - attach_workspace:
          at: .
      - run:
          name: integration tests
          command: |
            . .circleci/env.sh
            pytest --junitxml=test-reports/junit.xml -m unit tests
      - store_test_results:
          path: test-reports

  integration-test:
    executor: builder
    steps:
      - attach_workspace:
          at: .
      - run:
          name: integration tests
          command: |
            . .circleci/env.sh
            cd infrastructure
            terraform apply --auto-approve -var ssm_source_stage=$DEPLOY_STAGE -var account_id=$ACCOUNT_ID -no-color
            cd ..
            set +e # allows us to run the cleanup
            npx sls --stage=$DEPLOY_STAGE deploy
            export SUCCESS=$?
            npx sls --stage=$DEPLOY_STAGE exportEndpoints
            if [ $? != 0 ]; then
              export SUCCESS=1
            fi
            npx sls --stage=$DEPLOY_STAGE s3deploy
            if [ $? != 0 ]; then
              export SUCCESS=1
            fi
            pytest --junitxml=test-reports/junit.xml -m integration tests
            if [ $? != 0 ]; then
              export SUCCESS=1
            fi
            exit $SUCCESS
      - store_test_results:
          path: test-reports

  integration-env-tear-down:
    executor: builder
    steps:
      - attach_workspace:
          at: .
      - run:
          name: integration env tear down
          command: |
            . .circleci/env.sh
            npx sls --stage=$DEPLOY_STAGE remove
      - store_test_results:
          path: test-reports

  deploy:
    executor: builder
    steps:
      - attach_workspace:
          at: .
      # TODO change this when we move on to having multiple environments
      - run:
          name: deploy
          command: |
            . .circleci/env.
            cd infrastructure
            terraform apply plan.file
            cd ..
            npx sls --stage=$SSM_SOURCE_STAGE deploy

workflows:
  version: 2
  terraform-infrastructure:
    jobs:
      - setup
      - unit-test:
          requires: [ setup ]
      - integration-test:
          requires: [ setup ]
      - integration-env-tear-down:
          requires: [ integration-test ]
      - approve:
          type: approval
          requires:
            - unit-test
            - integration-test
          <<: *master-only
      - deploy:
          requires: [ approve ]
          <<: *master-only




